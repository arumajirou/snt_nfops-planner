name: pytest-light
on:
  push:
  pull_request:
  workflow_dispatch: {}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true
permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      COV_MIN: ${{ vars.COV_MIN || '85' }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
            requirements-dev.txt

      - name: Install (dev)
        run: |
          set -euxo pipefail
          python -m pip install -U pip
          pip install -e .[dev] pytest pytest-xdist pytest-cov pytest-rerunfailures "scipy>=1.11"

      - name: Collect pip verbose logs
        run: bash tools/pip-logs-collect.sh || true

      - name: Ensure pip log exists
        run: |
          mkdir -p pip-logs
          : > pip-logs/pip_install_verbose.log

      # 収集前クラッシュ可視化
      - name: PyTest collect-only (debug)
        continue-on-error: true
        run: |
          pytest -o addopts= --collect-only -vv \
                 -m "not heavy" \
                 -k "not phase5 and not phase6 and not phase11 and not slow"

      # 本番（軽テスト + カバレッジ + flaky 1回自動リトライ）
      - name: PyTest (light & coverage + 1 rerun)
        id: run_pytest
        continue-on-error: true
        run: |
          set -o pipefail
          ec=0
          pytest -o addopts= -p xdist.plugin -p pytest_rerunfailures -vv \
                 -m "not heavy" \
                 -k "not phase5 and not phase6 and not phase11 and not slow" \
                 -n auto --dist loadfile --durations=10 \
                 --reruns 1 --reruns-delay 2 \
                 --cov=. --cov-config=.coveragerc \
                 --cov-report=xml:coverage.xml \
                 --cov-report=html \
                 2>&1 | tee pytest-output.txt || ec=$?
          echo "exitcode=${ec}" >> "$GITHUB_OUTPUT"

      # カバレッジ集計（テスト失敗でもサマリだけは出す）
      - name: Coverage gate & summary
        id: cov
        continue-on-error: true
        run: |
          set -eu
          if [ -f coverage.xml ]; then
            pycov=$(python - <<'PY'
import xml.etree.ElementTree as ET
r=float(ET.parse("coverage.xml").getroot().attrib["line-rate"])*100
print(f"{r:.2f}")
PY
)
            echo "percent=${pycov}" >> "$GITHUB_OUTPUT"
            pass=1
            awk "BEGIN{exit !(${pycov} < ${COV_MIN})}" || pass=0
            {
              echo "### coverage"
              echo ""
              echo "- total: ${pycov}%"
              echo "- threshold (COV_MIN): ${COV_MIN}%"
              if [ $pass -eq 1 ]; then
                echo ""
                echo "> ✅ coverage gate passed"
              else
                echo ""
                echo "> ❌ coverage gate failed"
              fi
            } >> "$GITHUB_STEP_SUMMARY"
            echo "gate=$([ $pass -eq 1 ] && echo pass || echo fail)" >> "$GITHUB_OUTPUT"
          else
            echo "percent=" >> "$GITHUB_OUTPUT"
            echo "gate=skip" >> "$GITHUB_OUTPUT"
            {
              echo "### coverage"
              echo ""
              echo "- coverage.xml is missing (tests failed before reporting?)"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      # 失敗nodeid抽出（FAILED / ERROR collecting の先頭1件）
      - name: Extract nodeid (from pytest-output)
        id: nodeid
        if: always()
        run: |
          nodeid=$(awk '
            /^FAILED[[:space:]]+/           {print $2; exit}
            /^ERROR collecting[[:space:]]+/ {print $3; exit}
          ' pytest-output.txt 2>/dev/null || true)
          echo "nodeid=${nodeid}" >> "$GITHUB_OUTPUT"
          {
            echo "### pytest failure summary"
            echo ""
            if [ -n "${nodeid}" ]; then
              echo "- nodeid: \`${nodeid}\`"
              echo "- local reproduce:"
              echo '  ```bash'
              echo "  pytest -vv -n 0 --maxfail=1 \"${nodeid}\""
              echo '  ```'
            else
              echo "- no FAILED/ERROR collecting lines; likely pre-collection failure"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      # PRに再現コマンドをコメント（失敗時のみ／pull_request時のみ）
      - name: Comment nodeid to PR
        if: always() && github.event_name == 'pull_request' && steps.run_pytest.outputs.exitcode != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const marker = "<!-- pytest-light-nodeid -->";
            const nodeid = `${{ steps.nodeid.outputs.nodeid }}`;
            let body = `${marker}\n### pytest failure summary\n\n`;
            if (nodeid) {
              body += `- nodeid: \`${nodeid}\`\n- local reproduce:\n\`\`\`bash\npytest -vv -n 0 --maxfail=1 "${nodeid}"\n\`\`\`\n`;
            } else {
              body += `- no FAILED/ERROR collecting lines; likely pre-collection failure\n`;
            }
            const pr = context.payload.pull_request.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              per_page: 100
            });
            const mine = comments.find(c => c.user.type === "Bot" && c.body?.includes(marker));
            if (mine) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: mine.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr,
                body
              });
            }

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-light
          path: |
            coverage.xml
            htmlcov/**
          if-no-files-found: warn

      - name: Report pip cache hit rate
        if: always()
        run: |
          set -euxo pipefail
          if [ -s pip-logs/pip_install_verbose.log ]; then
            bash tools/pip-cache-hit-rate.sh pip-logs/pip_install_verbose.log || true
            echo '### pip cache hit' >> "$GITHUB_STEP_SUMMARY"
            cat pip-logs/cache_hit_rate.txt >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true
          else
            echo '### pip cache hit' >> "$GITHUB_STEP_SUMMARY"
            echo 'no pip_install_verbose.log (early failure)' >> "$GITHUB_STEP_SUMMARY"
          fi

      # 最終的なジョブ結果を決める（pytest失敗 or coverageゲート失敗）
      - name: Finalize job result
        if: always()
        run: |
          fail=0
          [ "${{ steps.run_pytest.outputs.exitcode }}" != "0" ] && fail=1
          [ "${{ steps.cov.outputs.gate }}" = "fail" ] && fail=1
          exit ${fail}
