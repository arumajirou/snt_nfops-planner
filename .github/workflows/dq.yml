name: dq
on: [push, pull_request, workflow_dispatch]

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
            setup.cfg

      - name: Pip cache (before)
        run: |
          {
            echo "## pip cache (before install)";
            echo "dir: $(pip cache dir)";
            pip cache info || true;
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Install deps (record status)
        id: install
        shell: bash
        run: |
          set +e
          export PIP_NO_COLOR=1
          (
            set -e
            python -m pip install -U pip
            pip install -e .[dev]
            pip install "pandas>=2.2" "pyarrow>=16"
          ) |& tee -a pip-install.log
          ec=${PIPESTATUS[0]}
          echo "exit_code=$ec" >> "$GITHUB_OUTPUT"
          echo "$ec" > .install_exit_code
          exit 0

      - name: Pip cache (after) & hit-rate
        shell: bash
        run: |
          hits=$(grep -c "Using cached" pip-install.log 2>/dev/null || true)
          downloads=$(grep -c "Downloading"  pip-install.log 2>/dev/null || true)
          total=$((hits+downloads))
          if [ "$total" -gt 0 ]; then
            rate=$(python3 - <<PY
hits=$hits
total=$total
print(f"{hits/total:.2%}")
PY
)
          else
            rate="n/a"
          fi
          {
            echo "## pip cache (after install)";
            pip cache info || true;
            echo "";
            echo "### pip install summary";
            echo "- Using cached: ${hits}";
            echo "- Downloading : ${downloads}";
            echo "- Estimated hit rate: ${rate}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload pip logs (smoke)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-logs-smoke
          path: pip-install.log
          if-no-files-found: ignore

      - name: dq --help (non-fatal)
        run: dq --help || true

      - run: echo "DQ Smoke step completed"

      - name: Fail if install failed (smoke)
        if: always()
        run: |
          code="${{ steps.install.outputs.exit_code }}"
          if [ -z "$code" ] && [ -f .install_exit_code ]; then code="$(cat .install_exit_code)"; fi
          code="${code:-0}"
          if [ "$code" -ne 0 ]; then
            echo "Install failed with exit $code"
            exit "$code"
          fi

  gate:
    runs-on: ubuntu-latest
    needs: smoke
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
            setup.cfg

      - name: Pip cache (before)
        run: |
          {
            echo "## pip cache (before install)";
            echo "dir: $(pip cache dir)";
            pip cache info || true;
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Install deps (record status)
        id: install
        shell: bash
        run: |
          set +e
          export PIP_NO_COLOR=1
          (
            set -e
            python -m pip install -U pip
            pip install -e .[dev]
            pip install "pandas>=2.2" "pyarrow>=16"
          ) |& tee -a pip-install.log
          ec=${PIPESTATUS[0]}
          echo "exit_code=$ec" >> "$GITHUB_OUTPUT"
          echo "$ec" > .install_exit_code
          exit 0

      - name: Pip cache (after) & hit-rate
        shell: bash
        run: |
          hits=$(grep -c "Using cached" pip-install.log 2>/dev/null || true)
          downloads=$(grep -c "Downloading"  pip-install.log 2>/dev/null || true)
          total=$((hits+downloads))
          if [ "$total" -gt 0 ]; then
            rate=$(python3 - <<PY
hits=$hits
total=$total
print(f"{hits/total:.2%}")
PY
)
          else
            rate="n/a"
          fi
          {
            echo "## pip cache (after install)";
            pip cache info || true;
            echo "";
            echo "### pip install summary";
            echo "- Using cached: ${hits}";
            echo "- Downloading : ${downloads}";
            echo "- Estimated hit rate: ${rate}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload pip logs (gate, pre-run)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-logs-gate
          path: pip-install.log
          if-no-files-found: ignore

      - name: Prepare sample.csv
        if: ${{ steps.install.outputs.exit_code == '0' }}
        run: |
          python - <<'PY'
          import pathlib
          data = pathlib.Path('data')
          data.mkdir(parents=True, exist_ok=True)
          csv = data/'sample.csv'
          pq  = data/'sample.parquet'
          if pq.exists():
              import pyarrow.parquet as pqmod
              pqmod.read_table(pq).to_pandas().to_csv(csv, index=False)
          elif not csv.exists():
              csv.write_text('id,name\n1,alice\n2,bob\n')
          print('prepared', csv, 'bytes=', csv.stat().st_size)
          PY

      - name: Run dq (record status, don't fail yet)
        id: run_dq
        if: ${{ steps.install.outputs.exit_code == '0' }}
        run: |
          set +e
          dq --input data/sample.csv --chunksize 50000
          code=$?
          echo "exit_code=$code" >> "$GITHUB_OUTPUT"
          echo "$code" > .dq_exit_code
          exit 0

      - name: Upload dq outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dq-outputs
          path: |
            outputs/**
            **/data_profiling.html
          if-no-files-found: warn

      - name: Fail if install/dq failed (gate)
        if: always()
        run: |
          code_inst="${{ steps.install.outputs.exit_code }}"
          [ -z "$code_inst" ] && [ -f .install_exit_code ] && code_inst="$(cat .install_exit_code)"
          code_inst="${code_inst:-0}"

          code_dq="${{ steps.run_dq.outputs.exit_code }}"
          [ -z "$code_dq" ] && [ -f .dq_exit_code ] && code_dq="$(cat .dq_exit_code)"
          code_dq="${code_dq:-0}"

          if [ "$code_inst" -ne 0 ]; then
            echo "Install failed with exit $code_inst"; exit "$code_inst"
          fi
          if [ "$code_dq" -ne 0 ]; then
            echo "dq failed with exit $code_dq"; exit "$code_dq"
          fi
