name: pytest
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
            setup.cfg

      - name: Pip cache (before)
        run: |
          {
            echo "## pip cache (before install)";
            echo "dir: $(pip cache dir)";
            pip cache info || true;
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Install deps (record status)
        id: install
        shell: bash
        run: |
          set +e
          export PIP_NO_COLOR=1
          (
            set -e
            python -m pip install -U pip
            pip install -e '.[dev]'
            pip install "pandas>=2.2" "pyarrow>=16"
          ) |& tee -a pip-install.log
          ec=${PIPESTATUS[0]}
          echo "exit_code=$ec" >> "$GITHUB_OUTPUT"
          echo "$ec" > .install_exit_code
          exit 0

      - name: Pip cache (after) & hit-rate
        shell: bash
        run: |
          hits=$(grep -c "Using cached" pip-install.log 2>/dev/null || true)
          downloads=$(grep -c "Downloading"  pip-install.log 2>/dev/null || true)
          total=$((hits+downloads))
          rate="n/a"
          if [ "$total" -gt 0 ]; then
            rate=$(awk -v h="$hits" -v t="$total" 'BEGIN{if(t>0) printf "%.2f%%",(h/t)*100; else print "n/a"}')
          fi
          {
            echo "## pip cache (after install)";
            pip cache info || true;
            echo "";
            echo "### pip install summary";
            echo "- Using cached: ${hits}";
            echo "- Downloading : ${downloads}";
            echo "- Estimated hit rate: ${rate}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload pip logs (pytest)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-logs-pytest
          path: pip-install.log
          if-no-files-found: ignore

      - name: Run pytest (record status; don't fail yet)
        id: run_pytest
        if: ${{ steps.install.outputs.exit_code == '0' }}
        run: |
          set +e
          pytest -q
          code=$?
          echo "exit_code=$code" >> "$GITHUB_OUTPUT"
          echo "$code" > .pytest_exit_code
          exit 0
